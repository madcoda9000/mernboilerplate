import{Router,json}from"express";import auth from"../middleware/auth.js";import roleCheck from"../middleware/roleCheck.js";import Setting from"../models/Setting.js";import crypto from"crypto";import doHttpLog from"../utils/httpLogger.js";import{updateAppSettingsValidation,updateLdapSettingsValidation,updateMailSettingsValidation,updateNotifSettingsValidation}from"../utils/validationSchema.js";import logger from"../services/logger.service.js";import{sendNotifOnObjectUpdate,sendNotifOnObjectCreation,sendObjectMail}from"../utils/mailSender.js";const router=Router();router.get("/getNotifSettings",(async(req,res)=>{const mid=crypto.randomBytes(16).toString("hex");try{doHttpLog("REQ",mid,req.method,req.originalUrl,req.ip);var sett=await Setting.find({scope:"notif"});if(sett){const jsonData={};return sett.forEach((item=>{jsonData[item.name]=item.value})),doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,"returned ldap settings list..",200),res.status(200).json({error:!1,message:"returned notification settings list..",settings:jsonData})}return doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,"No Data from query!",400),res.status(400).json({error:!0,message:"No data from query!"})}catch(err){doHttpLog("RES",mid,req.method,req.originalUrl,err.message,500),logger.error("API|settings.js|/getNotifSettings|"+err.message),res.status(500).json({message:err.message})}})),router.get("/getLdapSettings",(async(req,res)=>{const mid=crypto.randomBytes(16).toString("hex");try{doHttpLog("REQ",mid,req.method,req.originalUrl,req.ip);var sett=await Setting.find({scope:"ldap"});if(sett){const jsonData={};return sett.forEach((item=>{jsonData[item.name]=item.value})),doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,"returned ldap settings list..",200),res.status(200).json({error:!1,message:"returned ldap settings list..",settings:jsonData})}return doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,"No Data from query!",400),res.status(400).json({error:!0,message:"No data from query!"})}catch(err){doHttpLog("RES",mid,req.method,req.originalUrl,err.message,500),logger.error("API|settings.js|/getLdapSettings|"+err.message),res.status(500).json({message:err.message})}})),router.get("/getMailSettings",(async(req,res)=>{const mid=crypto.randomBytes(16).toString("hex");try{doHttpLog("REQ",mid,req.method,req.originalUrl,req.ip);var sett=await Setting.find({scope:"mail"});if(sett){const jsonData={};return sett.forEach((item=>{jsonData[item.name]=item.value})),doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,"returned mail settings list..",200),res.status(200).json({error:!1,message:"returned mail settings list..",settings:jsonData})}return doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,"No Data from query!",400),res.status(400).json({error:!0,message:"No data from query!"})}catch(err){doHttpLog("RES",mid,req.method,req.originalUrl,err.message,500),logger.error("API|settings.js|/getMailSettings|"+err.message),res.status(500).json({message:err.message})}})),router.get("/getAppSettings",(async(req,res)=>{const mid=crypto.randomBytes(16).toString("hex");try{doHttpLog("REQ",mid,req.method,req.originalUrl,req.ip);var sett=await Setting.find({scope:"app"});if(sett){const jsonData={};return sett.forEach((item=>{jsonData[item.name]=item.value})),doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,"returned app settings list..",200),res.status(200).json({error:!1,message:"returned appsettings list..",settings:jsonData})}return doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,"No Data from query!",400),res.status(400).json({error:!0,message:"No data from query!"})}catch(err){doHttpLog("RES",mid,req.method,req.originalUrl,err.message,500),logger.error("API|settings.js|/getAppSettings|"+err.message),res.status(500).json({message:err.message})}})),router.put("/updateAppSettings",auth,roleCheck("admins"),(async(req,res)=>{const mid=crypto.randomBytes(16).toString("hex");try{doHttpLog("REQ",mid,req.method,req.originalUrl,req.ip);const{error:error}=updateAppSettingsValidation(req.body);if(error)return doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,error.details[0].message,400),res.status(400).json({error:!0,message:error.details[0].message});const settingNames=["showMfaEnableBanner","showRegisterLink","showResetPasswordLink","showQuoteOfTheDay"];if((await Promise.all(settingNames.map((name=>Setting.findOne({name:name}))))).some((setting=>!setting)))return doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,"Setting not found",400),res.status(400).json({error:!0,message:"Setting not found"});const updates=settingNames.map(((name,index)=>({name:name,value:req.body[name]})));await Promise.all(updates.map((update=>Setting.updateOne({name:update.name},{$set:{value:update.value}})))),doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,"Application settings updated successfully",200),sendNotifOnObjectUpdate()&&sendObjectMail("App Settings","Settings","modified"),res.status(200).json({error:!1,message:"Application settings updated successfully"})}catch(err){doHttpLog("RES",mid,req.method,req.originalUrl,err.message,500),logger.error("API|settings.js|/updateAppSettings|"+err.message),res.status(500).json({message:err.message})}})),router.put("/updateMailSettings",auth,roleCheck("admins"),(async(req,res)=>{const mid=crypto.randomBytes(16).toString("hex");try{doHttpLog("REQ",mid,req.method,req.originalUrl,req.ip);const{error:error}=updateMailSettingsValidation(req.body);if(error)return doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,error.details[0].message,400),res.status(400).json({error:!0,message:error.details[0].message});const settingNames=["smtpServer","smtpPort","smtpUsername","smtpPassword","smtpTls","smtpSenderAddress"];if((await Promise.all(settingNames.map((name=>Setting.findOne({name:name}))))).some((setting=>!setting)))return doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,"Setting not found",400),res.status(400).json({error:!0,message:"Setting not found"});const updates=settingNames.map(((name,index)=>({name:name,value:req.body[name]})));await Promise.all(updates.map((update=>Setting.updateOne({name:update.name},{$set:{value:update.value}})))),doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,"Mail settings updated successfully",200),sendNotifOnObjectUpdate()&&sendObjectMail("Mail Settings","Settings","modified"),res.status(200).json({error:!1,message:"Mail settings updated successfully"})}catch(err){doHttpLog("RES",mid,req.method,req.originalUrl,err.message,500),logger.error("API|settings.js|/updateMailSettings|"+err.message),res.status(500).json({message:err.message})}})),router.put("/updateLdapSettings",auth,roleCheck("admins"),(async(req,res)=>{const mid=crypto.randomBytes(16).toString("hex");try{doHttpLog("REQ",mid,req.method,req.originalUrl,req.ip);const{error:error}=updateLdapSettingsValidation(req.body);if(error)return doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,error.details[0].message,400),res.status(400).json({error:!0,message:error.details[0].message});const settingNames=["ldapBaseDn","ldapDomainController","ldapDomainName","ldapEnabled","ldapGroup"];if((await Promise.all(settingNames.map((name=>Setting.findOne({name:name}))))).some((setting=>!setting)))return doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,"Setting not found",400),res.status(400).json({error:!0,message:"Setting not found"});const updates=settingNames.map(((name,index)=>({name:name,value:req.body[name]})));await Promise.all(updates.map((update=>Setting.updateOne({name:update.name},{$set:{value:update.value}})))),doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,"Ldap settings updated successfully",200),sendNotifOnObjectUpdate()&&sendObjectMail("LDAP Settings","Settings","modified"),res.status(200).json({error:!1,message:"Ldap settings updated successfully"})}catch(err){doHttpLog("RES",mid,req.method,req.originalUrl,err.message,500),logger.error("API|settings.js|/updateLdapSettings|"+err.message),res.status(500).json({message:err.message})}})),router.put("/updateNotifSettings",auth,roleCheck("admins"),(async(req,res)=>{const mid=crypto.randomBytes(16).toString("hex");try{doHttpLog("REQ",mid,req.method,req.originalUrl,req.ip);const{error:error}=updateNotifSettingsValidation(req.body);if(error)return doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,error.details[0].message,400),res.status(400).json({error:!0,message:error.details[0].message});const settingNames=["sendWelcomeMailOnUserCreation","sendNotifOnUserSelfRegister","sendNotifOnObjectUpdate","sendNotifOnObjectDeletion","sendNotifOnObjectCreation","notifReceiver","notifReciverFirstname","notifReceiverLastname"];if((await Promise.all(settingNames.map((name=>Setting.findOne({name:name}))))).some((setting=>!setting)))return doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,"Setting not found",400),res.status(400).json({error:!0,message:"Setting not found"});const updates=settingNames.map(((name,index)=>({name:name,value:req.body[name]})));await Promise.all(updates.map((update=>Setting.updateOne({name:update.name},{$set:{value:update.value}})))),doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,"Notification settings updated successfully",200),sendNotifOnObjectUpdate()&&sendObjectMail("Notification Settings","Settings","modified"),res.status(200).json({error:!1,message:"Notification settings updated successfully"})}catch(err){doHttpLog("RES",mid,req.method,req.originalUrl,err.message,500),logger.error("API|settings.js|/updateNotifSettings|"+err.message),res.status(500).json({message:err.message})}}));export default router;