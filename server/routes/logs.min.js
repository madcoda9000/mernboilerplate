import{Router}from"express";import auth from"../middleware/auth.js";import roleCheck from"../middleware/roleCheck.js";import Logs from"../models/logs.js";import crypto from"crypto";import doHttpLog from"../utils/httpLogger.js";import logger from"../services/logger.service.js";const router=Router();router.post("/createAuditEntry",auth,(async(req,res)=>{const mid=crypto.randomBytes(16).toString("hex");try{if(doHttpLog("REQ",mid,req.method,req.originalUrl,req.ip),null===req.body.user)return doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,"The User parameter is required!",400),res.status(400).json({error:!0,message:"The User parameter is required!"});if(null===req.body.level)return doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,"The level parameter is required!",400),res.status(400).json({error:!0,message:"The level parameter is required!"});if(null===req.body.message)return doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,"The message parameter is required!",400),res.status(400).json({error:!0,message:"The message parameter is required!"});"info"===req.body.level&&logger.info("AUDIT | "+req.body.user+" | "+req.body.message),"warn"===req.body.level&&logger.warn("AUDIT | "+req.body.user+" | "+req.body.message),"error"===req.body.level&&logger.error("AUDIT | "+req.body.user+" | "+req.body.message),doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,"Log entry created sucessfully",201),res.status(201).json({error:!1,message:"Log entry created sucessfully"})}catch(err){doHttpLog("RES",mid,req.method,req.originalUrl,err.message,500),logger.error("API|logs.js|/createAuditEntry|"+err.message),res.status(500).json({message:err.message})}})),router.get("/getMailLogs/:page/:pageSize/:searchParam?",auth,roleCheck("admins"),(async(req,res)=>{const mid=crypto.randomBytes(16).toString("hex");try{if(doHttpLog("REQ",mid,req.method,req.originalUrl,req.ip),void 0===req.params.page||null===req.params.page)return doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,"The page parameter is required!",400),res.status(400).json({error:!0,message:"The page parameter is required!"});if(void 0===req.params.pageSize||null===req.params.pageSize)return doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,"The pageSize parameter is required!",400),res.status(400).json({error:!0,message:"The pageSize parameter is required!"});if(req.params.searchParam){var query={$and:[{$or:[{level:{$regex:new RegExp(req.params.searchParam,"i")}},{message:{$regex:new RegExp("MAIL")}}]},{message:{$regex:new RegExp(".*"+req.params.searchParam+".*","i")}}]},options={page:req.params.page,limit:req.params.pageSize,sort:{timestamp:-1}};Logs.paginate(query,options,(function(error,paginatedResults){return error?(doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,error.message,400),res.status(400).json({error:!0,message:error.message})):(doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,"returned paginated mail logs list..",200),res.status(200).json({error:!1,message:"returned paginated mail logs list..",paginatedResult:paginatedResults}))}))}else{query={$or:[{message:{$regex:/MAIL/}}]},options={page:req.params.page,limit:req.params.pageSize,sort:{timestamp:-1}};Logs.paginate(query,options,(function(error,paginatedResults){return error?(doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,error.message,400),res.status(400).json({error:!0,message:error.message})):(doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,"returned paginated mail logs list..",200),res.status(200).json({error:!1,message:"returned paginated mail logs list..",paginatedResult:paginatedResults}))}))}}catch(err){doHttpLog("RES",mid,req.method,req.originalUrl,err.message,500),logger.error("API|logs.js|/getSystemLogs|"+err.message),res.status(500).json({message:err.message})}})),router.get("/getSystemLogs/:page/:pageSize/:searchParam?",auth,roleCheck("admins"),(async(req,res)=>{const mid=crypto.randomBytes(16).toString("hex");try{if(doHttpLog("REQ",mid,req.method,req.originalUrl,req.ip),void 0===req.params.page||null===req.params.page)return doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,"The page parameter is required!",400),res.status(400).json({error:!0,message:"The page parameter is required!"});if(void 0===req.params.pageSize||null===req.params.pageSize)return doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,"The pageSize parameter is required!",400),res.status(400).json({error:!0,message:"The pageSize parameter is required!"});if(req.params.searchParam){var query={$and:[{$or:[{level:{$regex:new RegExp(req.params.searchParam,"i")}},{message:{$regex:new RegExp("^SEEDER")}},{message:{$regex:new RegExp("^DATABASE")}},{message:{$regex:new RegExp("^SERVER")}},{message:{$regex:new RegExp("^API")}},{message:{$regex:new RegExp("^MAIL")}}]},{message:{$regex:new RegExp(".*"+req.params.searchParam+".*","i")}}]},options={page:req.params.page,limit:req.params.pageSize,sort:{timestamp:-1}};Logs.paginate(query,options,(function(error,paginatedResults){return error?(doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,error.message,400),res.status(400).json({error:!0,message:error.message})):(doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,"returned paginated mail logs list..",200),res.status(200).json({error:!1,message:"returned paginated mail logs list..",paginatedResult:paginatedResults}))}))}else{query={$or:[{message:{$regex:/^SEEDER/}},{message:{$regex:/^DATABASE/}},{message:{$regex:/^SERVER/}},{message:{$regex:/^API/}},{message:{$regex:/^MAIL/}}]},options={page:req.params.page,limit:req.params.pageSize,sort:{timestamp:-1}};Logs.paginate(query,options,(function(error,paginatedResults){return error?(doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,error.message,400),res.status(400).json({error:!0,message:error.message})):(doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,"returned paginated system logs list..",200),res.status(200).json({error:!1,message:"returned paginated system logs list..",paginatedResult:paginatedResults}))}))}}catch(err){doHttpLog("RES",mid,req.method,req.originalUrl,err.message,500),logger.error("API|logs.js|/getSystemLogs|"+err.message),res.status(500).json({message:err.message})}})),router.get("/getRequestLogs/:page/:pageSize/:searchParam?",auth,roleCheck("admins"),(async(req,res)=>{const mid=crypto.randomBytes(16).toString("hex");try{if(doHttpLog("REQ",mid,req.method,req.originalUrl,req.ip),void 0===req.params.page||null===req.params.page)return doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,"The page parameter is required!",400),res.status(400).json({error:!0,message:"The page parameter is required!"});if(void 0===req.params.pageSize||null===req.params.pageSize)return doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,"The pageSize parameter is required!",400),res.status(400).json({error:!0,message:"The pageSize parameter is required!"});if(req.params.searchParam){var query={$and:[{$or:[{message:{$regex:/^RES/}},{message:{$regex:/^REQ/}}]},{message:{$regex:".*"+req.params.searchParam+".*"}}]},options={page:req.params.page,limit:req.params.pageSize,sort:{timestamp:-1}};Logs.paginate(query,options,(function(error,paginatedResults){return error?(doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,error.message,400),res.status(400).json({error:!0,message:error.message})):(doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,"returned paginated request logs list..",200),res.status(200).json({error:!1,message:"returned paginated requst logs list..",paginatedResult:paginatedResults}))}))}else{query={$or:[{message:{$regex:/^RES/}},{message:{$regex:/^REQ/}}]},options={page:req.params.page,limit:req.params.pageSize,sort:{timestamp:-1}};Logs.paginate(query,options,(function(error,paginatedResults){return error?(doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,error.message,400),res.status(400).json({error:!0,message:error.message})):(doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,"returned paginated request logs list..",200),res.status(200).json({error:!1,message:"returned paginated request logs list..",paginatedResult:paginatedResults}))}))}}catch(err){doHttpLog("RES",mid,req.method,req.originalUrl,err.message,500),logger.error("API|logs.js|/getRequestLogs|"+err.message),res.status(500).json({message:err.message})}})),router.get("/getAuditLogs/:page/:pageSize/:searchParam?",auth,roleCheck("admins"),(async(req,res)=>{const mid=crypto.randomBytes(16).toString("hex");try{if(doHttpLog("REQ",mid,req.method,req.originalUrl,req.ip),void 0===req.params.page||null===req.params.page)return doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,"The page parameter is required!",400),res.status(400).json({error:!0,message:"The page parameter is required!"});if(void 0===req.params.pageSize||null===req.params.pageSize)return doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,"The pageSize parameter is required!",400),res.status(400).json({error:!0,message:"The pageSize parameter is required!"});if(req.params.searchParam){var query={$and:[{$or:[{message:{$regex:new RegExp("^AUDIT")}},{level:{$regex:new RegExp(req.params.searchParam,"i")}}]},{message:{$regex:new RegExp(".*"+req.params.searchParam+".*","i")}}]},options={page:req.params.page,limit:req.params.pageSize,sort:{timestamp:-1}};Logs.paginate(query,options,(function(error,paginatedResults){return error?(doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,error.message,400),res.status(400).json({error:!0,message:error.message})):(doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,"returned paginated audit logs list..",200),res.status(200).json({error:!1,message:"returned paginated audit logs list..",paginatedResult:paginatedResults}))}))}else{query={message:{$regex:/^AUDIT/}},options={page:req.params.page,limit:req.params.pageSize,sort:{timestamp:-1}};Logs.paginate(query,options,(function(error,paginatedResults){return error?(doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,error.message,400),res.status(400).json({error:!0,message:error.message})):(doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,"returned paginated audit logs list..",200),res.status(200).json({error:!1,message:"returned paginated audit logs list..",paginatedResult:paginatedResults}))}))}}catch(err){doHttpLog("RES",mid,req.method,req.originalUrl,err.message,500),logger.error("API|logs.js|/getAuditLogs|"+err.message),res.status(500).json({message:err.message})}}));export default router;