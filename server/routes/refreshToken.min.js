import{Router}from"express";import UserToken from"../models/UserToken.js";import User from"../models/User.js";import jwt from"jsonwebtoken";import verifyRefreshToken from"../utils/verifyRefreshToken.js";import{refreshTokenBodyValidation}from"../utils/validationSchema.js";import doHttpLog from"../utils/httpLogger.js";import crypto from"crypto";import logger from"../services/logger.service.js";import{enviromentConfig}from"../config/enviromentConfig.js";const router=Router();router.get("/createNewAccessToken",(async(req,res)=>{const mid=crypto.randomBytes(16).toString("hex");doHttpLog("REQ",mid,req.method,req.originalUrl,req.ip);const refreshToken=req.cookies.refreshToken;if(!refreshToken)return doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,"Access Denied: No refreshToken cookie provided",401),res.status(401).json({error:!0,message:"Access Denied: No refreshToken cookie provided"});let verifyMfaState=!1,reqUser=null;const checkTok=await UserToken.findOne({token:refreshToken});checkTok&&(reqUser=await User.findById({_id:checkTok.userId}),reqUser.password="",reqUser.mfaToken="",reqUser&&(verifyMfaState=reqUser.mfaVerified)),verifyRefreshToken(refreshToken).then((({tokenDetails:tokenDetails})=>{const payload={_id:tokenDetails._id,firstName:tokenDetails.firstName,lastName:tokenDetails.lastName,userName:tokenDetails.userName,email:tokenDetails.email,roles:tokenDetails.roles,mfaEnabled:tokenDetails.mfaEnabled,mfaEnforced:tokenDetails.mfaEnforced,mfaVerified:verifyMfaState},accessToken=jwt.sign(payload,enviromentConfig.jwt.accessTokenPrivateKey,{expiresIn:"1m"});doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,"Access token created successfully",200);let mdate=new Date;mdate.setTime(mdate.getTime()+6e4),res.cookie("accessToken",accessToken,{httpOnly:!0,secure:!1,sameSite:"strict",expires:mdate}),res.status(200).json({error:!1,reqUser:reqUser,message:"Access token created successfully"})})).catch((err=>{doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,err.message,400),logger.error("API|refreshToken.js|/createNewAccessToken|"+err.message),res.status(400).json(err)}))})),router.get("/logout",(async(req,res)=>{const mid=crypto.randomBytes(16).toString("hex");try{doHttpLog("REQ",mid,req.method,req.originalUrl,req.ip);const refreshToken=req.cookies.refreshToken;if(!refreshToken)return doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,"Access Denied: No refreshToken cookie provided",401),res.status(401).json({error:!0,message:"Access Denied: No refreshToken cookie provided"});const userToken=await UserToken.findOne({token:refreshToken});if(!userToken)return doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,"Logged Out Sucessfully",200),res.status(200).json({error:!1,message:"Logged Out Sucessfully"});const us=await User.findOne({_id:userToken.userId});if(await userToken.remove(),doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,"Logged Out Sucessfully",200),us){let upd={mfaVerified:!1};await User.findByIdAndUpdate({_id:us._id},upd),logger.info("AUDIT | "+us.userName+" | Logged out sucessfully")}res.status(200).clearCookie("accessToken").clearCookie("refreshToken").json({error:!1,message:"Logged Out Sucessfully"})}catch(err){doHttpLog("RES",mid,req.method,req.originalUrl,req.ip,err,500),logger.error("API|refreshToken.js|/logout|"+err.message),res.status(500).json({error:!0,message:"Internal Server Error"})}}));export default router;